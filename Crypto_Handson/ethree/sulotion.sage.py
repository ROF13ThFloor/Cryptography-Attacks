

# This file was *autogenerated* from the file sulotion.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)
from sage.all import *
import binascii

def LowExponent(encs,modules):
    
    M3=CRT_list([Integer(encs[_sage_const_0 ]) , Integer(encs[_sage_const_1 ]) , Integer(encs[_sage_const_2 ])], [Integer(modules[_sage_const_0 ]) , Integer(modules[_sage_const_1 ]) , Integer(modules[_sage_const_2 ])])
    print(M3)
    M=(M3)**(_sage_const_1 /_sage_const_3 )
    print(M)
    print(type(M))
    pretty_print(binascii.unhexlify(hex(M)[_sage_const_2 :]))
    return M


modules = list()
encs = list()
counter = _sage_const_0 
with open("output.txt", "r") as a_file:
  for line in a_file:
    if (counter >= _sage_const_3 ):
        stripped_line = line.strip()
        encs.append(stripped_line.split('=')[_sage_const_1 ].replace(" " , ""))
        counter = counter + _sage_const_1 
    else:  
        stripped_line = line.strip()
        modules.append(stripped_line.split('=')[_sage_const_1 ].replace(" " , ""))
        counter = counter + _sage_const_1 

LowExponent(encs , modules)

